name: Build and Release

on:
  release:
    types: [created]

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: maya-canteen-linux
            asset_name: maya-canteen-linux
          - os: windows-latest
            output_name: maya-canteen-windows.exe
            asset_name: maya-canteen-windows
          - os: macos-latest
            output_name: maya-canteen-macos
            asset_name: maya-canteen-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          check-latest: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "latest"
          run_install: false

      - name: Get Frontend Dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: Build Frontend
        run: |
          cd frontend
          pnpm build

      - name: Build Backend for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $env:CGO_ENABLED=1
          $env:GOOS="windows"
          $env:GOARCH="amd64"
          go build -o ${{ matrix.output_name }} cmd/api/main.go

      - name: Build Backend for Linux/macOS
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            export GOOS=linux
          else
            export GOOS=darwin
          fi
          CGO_ENABLED=1 GOARCH=amd64 go build -o ${{ matrix.output_name }} cmd/api/main.go

      - name: Create distribution package for Linux/macOS
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          mkdir -p dist/db
          mkdir -p dist/frontend/dist
          cp ${{ matrix.output_name }} dist/
          cp -r frontend/dist/* dist/frontend/dist/
          cp .env.example dist/.env
          touch dist/db/canteen.db
          cd dist && tar -czf ../${{ matrix.asset_name }}.tar.gz .

      - name: Create distribution package for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -Path dist\db -ItemType Directory -Force
          New-Item -Path dist\frontend\dist -ItemType Directory -Force
          Copy-Item -Path ${{ matrix.output_name }} -Destination dist\
          Copy-Item -Path frontend\dist\* -Destination dist\frontend\dist\ -Recurse
          Copy-Item -Path .env.example -Destination dist\.env
          New-Item -Path dist\db\canteen.db -ItemType File -Force
          Compress-Archive -Path dist\* -DestinationPath ${{ matrix.asset_name }}.zip

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.asset_name }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_name: ${{ matrix.asset_name }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
